@mrjoswald

import Foundation
import Cocoa
import UniformTypeIdentifiers

struct Point: Hashable {
    let x: Int
    let y: Int
}

struct PixelData {
    var a: UInt8 = 255
    var r: UInt8
    var g: UInt8
    var b: UInt8
}

struct TerrainData {
    let rows: Int
    let columns: Int
    let waterSources: [Point]
    var elevations: [[Int]]
}

let floodColor = PixelData(r: 0, g: 49, b: 83)

let colorList: [PixelData] = [
    PixelData(r: 0, g: 102, b: 0),
    PixelData(r: 154, g: 205, b: 50),
    PixelData(r: 251, g: 236, b: 93),
    PixelData(r: 212, g: 175, b: 55),
    PixelData(r: 166, g: 60, b: 20),
]

func createSampleTerrain() -> TerrainData {
    let rows = 10
    let columns = 10
    let waterSources = [Point(x: 0, y: 9)]
    
    let elevations: [[Int]] = [
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 4, 4, 4, 4, 4, 4, 4, 4, 5],
        [5, 4, 3, 3, 3, 3, 3, 3, 4, 5],
        [5, 4, 3, 2, 2, 2, 2, 3, 4, 5],
        [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],
        [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],
        [5, 4, 3, 2, 2, 2, 2, 3, 4, 5],
        [5, 4, 3, 3, 3, 3, 3, 3, 4, 5],
        [5, 4, 4, 4, 4, 4, 4, 4, 4, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    ]
    
    return TerrainData(rows: rows, columns: columns, waterSources: waterSources, elevations: elevations)
}

func simulateFlooding(terrain: inout TerrainData, waterLevel: Int) -> Set<Point> {
    var floodedAreas = Set<Point>()
    
    // Start with water sources
    for source in terrain.waterSources {
        floodedAreas.insert(source)
    }
    
    // Flood neighboring areas
    var changed = true
    while changed {
        changed = false
        let currentFloodedAreas = floodedAreas
        
        for point in currentFloodedAreas {
            let neighbors = [
                Point(x: point.x - 1, y: point.y), Point(x: point.x + 1, y: point.y),
                Point(x: point.x, y: point.y - 1), Point(x: point.x, y: point.y + 1)
            ]
            
            for neighbor in neighbors {
                if neighbor.y >= 0 && neighbor.y < terrain.rows && neighbor.x >= 0 && neighbor.x < terrain.columns {
                    if terrain.elevations[neighbor.y][neighbor.x] <= waterLevel && !floodedAreas.contains(neighbor) {
                        floodedAreas.insert(neighbor)
                        changed = true
                    }
                }
            }
        }
    }
    
    return floodedAreas
}

func terrainToPixelData(terrain: TerrainData, floodedAreas: Set<Point>, waterLevel: Int) -> [PixelData] {
    var pixelData = [PixelData](repeating: PixelData(r: 0, g: 0, b: 0), count: terrain.rows * terrain.columns)
    
    for y in 0..<terrain.rows {
        for x in 0..<terrain.columns {
            let index = y * terrain.columns + x
            let point = Point(x: x, y: y)
            
            if floodedAreas.contains(point) {
                pixelData[index] = floodColor
            } else {
                let elevation = terrain.elevations[y][x]
                let colorIndex = min(elevation, colorList.count - 1)
                pixelData[index] = colorList[colorIndex]
            }
        }
    }
    
    return pixelData
}

extension CGImage {
    var png: Data? {
        let cfdata: CFMutableData = CFDataCreateMutable(nil, 0)
        if let destination = CGImageDestinationCreateWithData(cfdata, UTType.png.identifier as CFString, 1, nil) {
            CGImageDestinationAddImage(destination, self, nil)
            if CGImageDestinationFinalize(destination) {
                return cfdata as Data
            }
        }
        return nil
    }
}

func pixelDataToImage(pixels: [PixelData], width: Int, height: Int) -> CGImage {
    assert(pixels.count == width * height)
    let bitsPerComponent: Int = 8
    let bitsPerPixel: Int = 32
    let rgbColorSpace = CGColorSpaceCreateDeviceRGB()
    let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedFirst.rawValue)

    var data = pixels
    guard let providerRef = CGDataProvider(data: NSData(bytes: &data, length: data.count * MemoryLayout<PixelData>.size)) else {
        fatalError("CGDataProvider failure")
    }
    
    guard let image = CGImage(
        width: width,
        height: height,
        bitsPerComponent: bitsPerComponent,
        bitsPerPixel: bitsPerPixel,
        bytesPerRow: width * MemoryLayout<PixelData>.size,
        space: rgbColorSpace,
        bitmapInfo: bitmapInfo,
        provider: providerRef,
        decode: nil,
        shouldInterpolate: true,
        intent: .defaultIntent
    ) else {
        fatalError("CGImage failure")
    }
    
    return image
}

// Main simulation
var terrain = createSampleTerrain()

for waterLevel in 0...5 {
    let floodedAreas = simulateFlooding(terrain: &terrain, waterLevel: waterLevel)
    let pixelData = terrainToPixelData(terrain: terrain, floodedAreas: floodedAreas, waterLevel: waterLevel)
    let image = pixelDataToImage(pixels: pixelData, width: terrain.columns, height: terrain.rows)
    
    if let pngData = image.png {
        let fileName = "flood_level_\(waterLevel).png"
        let fileURL = URL(fileURLWithPath: fileName)
        try? pngData.write(to: fileURL)
        print("Saved image for water level \(waterLevel) to \(fileName)")
    }
}
